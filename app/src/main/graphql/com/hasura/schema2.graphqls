schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "note"
  """
  delete_note(
    """filter the rows which have to be deleted"""
    where: note_bool_exp!
  ): note_mutation_response

  """
  delete single row from the table: "note"
  """
  delete_note_by_pk(id: String!): note

  """
  delete data from the table: "post"
  """
  delete_post(
    """filter the rows which have to be deleted"""
    where: post_bool_exp!
  ): post_mutation_response

  """
  delete single row from the table: "post"
  """
  delete_post_by_pk(id: Int!): post

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(uuid: String!): user

  """
  insert data into the table: "note"
  """
  insert_note(
    """the rows to be inserted"""
    objects: [note_insert_input!]!

    """upsert condition"""
    on_conflict: note_on_conflict
  ): note_mutation_response

  """
  insert a single row into the table: "note"
  """
  insert_note_one(
    """the row to be inserted"""
    object: note_insert_input!

    """upsert condition"""
    on_conflict: note_on_conflict
  ): note

  """
  insert data into the table: "post"
  """
  insert_post(
    """the rows to be inserted"""
    objects: [post_insert_input!]!

    """upsert condition"""
    on_conflict: post_on_conflict
  ): post_mutation_response

  """
  insert a single row into the table: "post"
  """
  insert_post_one(
    """the row to be inserted"""
    object: post_insert_input!

    """upsert condition"""
    on_conflict: post_on_conflict
  ): post

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """upsert condition"""
    on_conflict: user_on_conflict
  ): user

  """
  update data of the table: "note"
  """
  update_note(
    """increments the numeric columns with given value of the filtered values"""
    _inc: note_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: note_set_input

    """filter the rows which have to be updated"""
    where: note_bool_exp!
  ): note_mutation_response

  """
  update single row of the table: "note"
  """
  update_note_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: note_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: note_set_input
    pk_columns: note_pk_columns_input!
  ): note

  """
  update multiples rows of table: "note"
  """
  update_note_many(
    """updates to execute, in order"""
    updates: [note_updates!]!
  ): [note_mutation_response]

  """
  update data of the table: "post"
  """
  update_post(
    """increments the numeric columns with given value of the filtered values"""
    _inc: post_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: post_set_input

    """filter the rows which have to be updated"""
    where: post_bool_exp!
  ): post_mutation_response

  """
  update single row of the table: "post"
  """
  update_post_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: post_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: post_set_input
    pk_columns: post_pk_columns_input!
  ): post

  """
  update multiples rows of table: "post"
  """
  update_post_many(
    """updates to execute, in order"""
    updates: [post_updates!]!
  ): [post_mutation_response]

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update multiples rows of table: "user"
  """
  update_user_many(
    """updates to execute, in order"""
    updates: [user_updates!]!
  ): [user_mutation_response]
}

"""
columns and relationships of "note"
"""
type note {
  body: String!
  id: String!

  """An object relationship"""
  note_user: user!
  timestamp: bigint!
  title: String!
  uuid: String!
}

"""
aggregated selection of "note"
"""
type note_aggregate {
  aggregate: note_aggregate_fields
  nodes: [note!]!
}

"""
aggregate fields of "note"
"""
type note_aggregate_fields {
  avg: note_avg_fields
  count(columns: [note_select_column!], distinct: Boolean): Int!
  max: note_max_fields
  min: note_min_fields
  stddev: note_stddev_fields
  stddev_pop: note_stddev_pop_fields
  stddev_samp: note_stddev_samp_fields
  sum: note_sum_fields
  var_pop: note_var_pop_fields
  var_samp: note_var_samp_fields
  variance: note_variance_fields
}

"""aggregate avg on columns"""
type note_avg_fields {
  timestamp: Float
}

"""
Boolean expression to filter rows from the table "note". All fields are combined with a logical 'AND'.
"""
input note_bool_exp {
  _and: [note_bool_exp!]
  _not: note_bool_exp
  _or: [note_bool_exp!]
  body: String_comparison_exp
  id: String_comparison_exp
  note_user: user_bool_exp
  timestamp: bigint_comparison_exp
  title: String_comparison_exp
  uuid: String_comparison_exp
}

"""
unique or primary key constraints on table "note"
"""
enum note_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  note_pkey
}

"""
input type for incrementing numeric columns in table "note"
"""
input note_inc_input {
  timestamp: bigint
}

"""
input type for inserting data into table "note"
"""
input note_insert_input {
  body: String
  id: String
  note_user: user_obj_rel_insert_input
  timestamp: bigint
  title: String
  uuid: String
}

"""aggregate max on columns"""
type note_max_fields {
  body: String
  id: String
  timestamp: bigint
  title: String
  uuid: String
}

"""aggregate min on columns"""
type note_min_fields {
  body: String
  id: String
  timestamp: bigint
  title: String
  uuid: String
}

"""
response of any mutation on the table "note"
"""
type note_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [note!]!
}

"""
on_conflict condition type for table "note"
"""
input note_on_conflict {
  constraint: note_constraint!
  update_columns: [note_update_column!]! = []
  where: note_bool_exp
}

"""Ordering options when selecting data from "note"."""
input note_order_by {
  body: order_by
  id: order_by
  note_user: user_order_by
  timestamp: order_by
  title: order_by
  uuid: order_by
}

"""primary key columns input for table: note"""
input note_pk_columns_input {
  id: String!
}

"""
select columns of table "note"
"""
enum note_select_column {
  """column name"""
  body

  """column name"""
  id

  """column name"""
  timestamp

  """column name"""
  title

  """column name"""
  uuid
}

"""
input type for updating data in table "note"
"""
input note_set_input {
  body: String
  id: String
  timestamp: bigint
  title: String
  uuid: String
}

"""aggregate stddev on columns"""
type note_stddev_fields {
  timestamp: Float
}

"""aggregate stddev_pop on columns"""
type note_stddev_pop_fields {
  timestamp: Float
}

"""aggregate stddev_samp on columns"""
type note_stddev_samp_fields {
  timestamp: Float
}

"""
Streaming cursor of the table "note"
"""
input note_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: note_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input note_stream_cursor_value_input {
  body: String
  id: String
  timestamp: bigint
  title: String
  uuid: String
}

"""aggregate sum on columns"""
type note_sum_fields {
  timestamp: bigint
}

"""
update columns of table "note"
"""
enum note_update_column {
  """column name"""
  body

  """column name"""
  id

  """column name"""
  timestamp

  """column name"""
  title

  """column name"""
  uuid
}

input note_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: note_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: note_set_input

  """filter the rows which have to be updated"""
  where: note_bool_exp!
}

"""aggregate var_pop on columns"""
type note_var_pop_fields {
  timestamp: Float
}

"""aggregate var_samp on columns"""
type note_var_samp_fields {
  timestamp: Float
}

"""aggregate variance on columns"""
type note_variance_fields {
  timestamp: Float
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "post"
"""
type post {
  body: String!
  id: Int!
  title: String!
}

"""
aggregated selection of "post"
"""
type post_aggregate {
  aggregate: post_aggregate_fields
  nodes: [post!]!
}

"""
aggregate fields of "post"
"""
type post_aggregate_fields {
  avg: post_avg_fields
  count(columns: [post_select_column!], distinct: Boolean): Int!
  max: post_max_fields
  min: post_min_fields
  stddev: post_stddev_fields
  stddev_pop: post_stddev_pop_fields
  stddev_samp: post_stddev_samp_fields
  sum: post_sum_fields
  var_pop: post_var_pop_fields
  var_samp: post_var_samp_fields
  variance: post_variance_fields
}

"""aggregate avg on columns"""
type post_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "post". All fields are combined with a logical 'AND'.
"""
input post_bool_exp {
  _and: [post_bool_exp!]
  _not: post_bool_exp
  _or: [post_bool_exp!]
  body: String_comparison_exp
  id: Int_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "post"
"""
enum post_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  post_pkey
}

"""
input type for incrementing numeric columns in table "post"
"""
input post_inc_input {
  id: Int
}

"""
input type for inserting data into table "post"
"""
input post_insert_input {
  body: String
  id: Int
  title: String
}

"""aggregate max on columns"""
type post_max_fields {
  body: String
  id: Int
  title: String
}

"""aggregate min on columns"""
type post_min_fields {
  body: String
  id: Int
  title: String
}

"""
response of any mutation on the table "post"
"""
type post_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [post!]!
}

"""
on_conflict condition type for table "post"
"""
input post_on_conflict {
  constraint: post_constraint!
  update_columns: [post_update_column!]! = []
  where: post_bool_exp
}

"""Ordering options when selecting data from "post"."""
input post_order_by {
  body: order_by
  id: order_by
  title: order_by
}

"""primary key columns input for table: post"""
input post_pk_columns_input {
  id: Int!
}

"""
select columns of table "post"
"""
enum post_select_column {
  """column name"""
  body

  """column name"""
  id

  """column name"""
  title
}

"""
input type for updating data in table "post"
"""
input post_set_input {
  body: String
  id: Int
  title: String
}

"""aggregate stddev on columns"""
type post_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type post_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type post_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "post"
"""
input post_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: post_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input post_stream_cursor_value_input {
  body: String
  id: Int
  title: String
}

"""aggregate sum on columns"""
type post_sum_fields {
  id: Int
}

"""
update columns of table "post"
"""
enum post_update_column {
  """column name"""
  body

  """column name"""
  id

  """column name"""
  title
}

input post_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: post_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: post_set_input

  """filter the rows which have to be updated"""
  where: post_bool_exp!
}

"""aggregate var_pop on columns"""
type post_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type post_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type post_variance_fields {
  id: Float
}

type query_root {
  """
  fetch data from the table: "note"
  """
  note(
    """distinct select on columns"""
    distinct_on: [note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [note_order_by!]

    """filter the rows returned"""
    where: note_bool_exp
  ): [note!]!

  """
  fetch aggregated fields from the table: "note"
  """
  note_aggregate(
    """distinct select on columns"""
    distinct_on: [note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [note_order_by!]

    """filter the rows returned"""
    where: note_bool_exp
  ): note_aggregate!

  """fetch data from the table: "note" using primary key columns"""
  note_by_pk(id: String!): note

  """
  fetch data from the table: "post"
  """
  post(
    """distinct select on columns"""
    distinct_on: [post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [post_order_by!]

    """filter the rows returned"""
    where: post_bool_exp
  ): [post!]!

  """
  fetch aggregated fields from the table: "post"
  """
  post_aggregate(
    """distinct select on columns"""
    distinct_on: [post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [post_order_by!]

    """filter the rows returned"""
    where: post_bool_exp
  ): post_aggregate!

  """fetch data from the table: "post" using primary key columns"""
  post_by_pk(id: Int!): post

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(uuid: String!): user
}

type subscription_root {
  """
  fetch data from the table: "note"
  """
  note(
    """distinct select on columns"""
    distinct_on: [note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [note_order_by!]

    """filter the rows returned"""
    where: note_bool_exp
  ): [note!]!

  """
  fetch aggregated fields from the table: "note"
  """
  note_aggregate(
    """distinct select on columns"""
    distinct_on: [note_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [note_order_by!]

    """filter the rows returned"""
    where: note_bool_exp
  ): note_aggregate!

  """fetch data from the table: "note" using primary key columns"""
  note_by_pk(id: String!): note

  """
  fetch data from the table in a streaming manner: "note"
  """
  note_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [note_stream_cursor_input]!

    """filter the rows returned"""
    where: note_bool_exp
  ): [note!]!

  """
  fetch data from the table: "post"
  """
  post(
    """distinct select on columns"""
    distinct_on: [post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [post_order_by!]

    """filter the rows returned"""
    where: post_bool_exp
  ): [post!]!

  """
  fetch aggregated fields from the table: "post"
  """
  post_aggregate(
    """distinct select on columns"""
    distinct_on: [post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [post_order_by!]

    """filter the rows returned"""
    where: post_bool_exp
  ): post_aggregate!

  """fetch data from the table: "post" using primary key columns"""
  post_by_pk(id: Int!): post

  """
  fetch data from the table in a streaming manner: "post"
  """
  post_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [post_stream_cursor_input]!

    """filter the rows returned"""
    where: post_bool_exp
  ): [post!]!

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(uuid: String!): user

  """
  fetch data from the table in a streaming manner: "user"
  """
  user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_stream_cursor_input]!

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!
}

"""
columns and relationships of "user"
"""
type user {
  email: String!
  profile_pic: String!
  user_name: String!
  uuid: String!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  email: String_comparison_exp
  profile_pic: String_comparison_exp
  user_name: String_comparison_exp
  uuid: String_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """
  unique or primary key constraint on columns "uuid"
  """
  user_pkey
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  email: String
  profile_pic: String
  user_name: String
  uuid: String
}

"""aggregate max on columns"""
type user_max_fields {
  email: String
  profile_pic: String
  user_name: String
  uuid: String
}

"""aggregate min on columns"""
type user_min_fields {
  email: String
  profile_pic: String
  user_name: String
  uuid: String
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """upsert condition"""
  on_conflict: user_on_conflict
}

"""
on_conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  email: order_by
  profile_pic: order_by
  user_name: order_by
  uuid: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  uuid: String!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  email

  """column name"""
  profile_pic

  """column name"""
  user_name

  """column name"""
  uuid
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  email: String
  profile_pic: String
  user_name: String
  uuid: String
}

"""
Streaming cursor of the table "user"
"""
input user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_stream_cursor_value_input {
  email: String
  profile_pic: String
  user_name: String
  uuid: String
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  email

  """column name"""
  profile_pic

  """column name"""
  user_name

  """column name"""
  uuid
}

input user_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_set_input

  """filter the rows which have to be updated"""
  where: user_bool_exp!
}

